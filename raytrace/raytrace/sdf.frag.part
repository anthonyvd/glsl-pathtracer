/*
The *VAST* majority of the functions in this file are from the amazing
Inigo Quilez, specifically their page on SDF distance functions:
https://iquilezles.org/www/articles/distfunctions/distfunctions.htm
*/
struct sdf_result_t {
	float dist;
	mat_t closest_material;
};

float hash1( float n )
{
    return fract( n*17.0*fract( n*0.3183099 ) );
}

// Taken from Inigo Quilez's Rainforest ShaderToy:
// https://www.shadertoy.com/view/4ttSWf
float noise( in vec3 x )
{
    vec3 p = floor(x);
    vec3 w = fract(x);
    
    vec3 u = w*w*w*(w*(w*6.0-15.0)+10.0);
    
    float n = p.x + 317.0*p.y + 157.0*p.z;
    
    float a = hash1(n+0.0);
    float b = hash1(n+1.0);
    float c = hash1(n+317.0);
    float d = hash1(n+318.0);
    float e = hash1(n+157.0);
	float f = hash1(n+158.0);
    float g = hash1(n+474.0);
    float h = hash1(n+475.0);

    float k0 =   a;
    float k1 =   b - a;
    float k2 =   c - a;
    float k3 =   e - a;
    float k4 =   a - b - c + d;
    float k5 =   a - c - e + g;
    float k6 =   a - b - e + f;
    float k7 = - a + b + c - d + e - f - g + h;

    return -1.0+2.0*(k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z);
}

const int kOctaves = 4;
float fbm_noise1(vec3 p, float h) {
	float G = exp2(-h);
	float f = 1.0;
	float a = 1.0;
	float t = 0.0;
	for (int i = 0; i < kOctaves; ++i) {
		t += a * noise(f * p);
		f *= 2.0;
		a *= G;
	}
	return t;
}

sdf_result_t fbm_noise(vec3 p, float h, sdf_result_t s) {
	vec3 fbm_coord = ((p + 2.0 * vec3(0, 0, 0)) / 1.5) / 3.2;
	return sdf_result_t(s.dist + 3 * fbm_noise1(fbm_coord, h), s.closest_material);
}

vec3 twist_sdf(vec3 p) {
	const float k = 2.0;
	float c = cos(k * p.y);
	float s = sin(k * p.y);
	mat2 m = mat2(c, -s, s, c);
	vec3 q = vec3(m * p.xz, p.y);

	return q;
}

// Using this crashes (still?)
// Repeats an SDF an infinite amount of times.
vec3 repeat_inf_sdf(vec3 p, vec3 c) {
	return mod(p + 0.5 * c, c) - 0.5 * c;
}

// Repeats an SDF a certain amount of times.
vec3 repeat_lim_sdf(vec3 p, float c, vec3 l) {
	return p - c * clamp(round(p / c), -l, l);
}

// Computes the inverse of an SDF. Used to use a box as a room for instance.
float neg_sdf(float s) {
	return -s;
}

sdf_result_t neg_sdf(sdf_result_t s) {
	return sdf_result_t(neg_sdf(s.dist), s.closest_material);
}

// Subtracts |a| from |b|
float sub_sdf(float a, float b) {
	return max(-a, b);
}

sdf_result_t sub_sdf(sdf_result_t a, sdf_result_t b) {
	return sdf_result_t(sub_sdf(a.dist, b.dist), b.closest_material);
}

// Returns the union of |a| and |b|
float union_sdf(float a, float b) {
	return min(a, b);
}

sdf_result_t union_sdf(sdf_result_t a, sdf_result_t b) {
	return sdf_result_t(union_sdf(a.dist, b.dist), a.dist < b.dist ? a.closest_material : b.closest_material);
}

// Returns the union of |a| and |b|, smoothed by |k| expressed in absolute distance units.
float smooth_union_sdf(float k, float a, float b) {
	float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);
    return mix(b, a, h) - k * h * (1.0 - h);
}

sdf_result_t smooth_union_sdf(float k, sdf_result_t a, sdf_result_t b) {
	return sdf_result_t(smooth_union_sdf(k, a.dist, b.dist), a.dist < b.dist ? a.closest_material : b.closest_material);
}

float sphere_sdf(vec3 p, float radius) {
	return length(p) - radius;
}

float box_sdf(vec3 p, vec3 bounds) {
	vec3 q = abs(p) - bounds;
	return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}

float box_sdf(vec3 p, float x, float y, float z) {
	return box_sdf(p, vec3(x, y, z));
}

float octahedron_bound_sdf(vec3 p, float s) {
	p = abs(p);
	return (p.x + p.y + p.z - s) * 0.57735027;
}

float torus_sdf(vec3 p, vec2 t) {
	vec2 q = vec2(length(p.xz) - t.x, p.y);
	return length(q) - t.y;
}

float plane_sdf(vec3 p, vec3 n, float h) {
	return dot(p, n) + h;
}

float plane_sdf(vec3 p, float nx, float ny, float nz, float h) {
	return plane_sdf(p, vec3(nx, ny, nz), h);
}

// Returns the matrix corresponding to a rotation of |angle| around |axis|.
// (Thanks http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/)
mat3 rotation_matrix(vec3 axis, float angle)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;
    
    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c         );
}

// Translates |p| by the inverse of |x, y, z|. SDFs transformations are achieved
// by transforming the sample point by the inverse of the SDF's transformation.
vec3 rtrans(vec3 p, float x, float y, float z) {
	return p - vec3(x, y, z);
}

// Rotates |p| by the inverse of the rotation of |angle| around |ax, ay, az|.
vec3 rrot(vec3 p, float ax, float ay, float az, float angle) {
	return (inverse(rotation_matrix(vec3(ax, ay, az), angle)) * p);
}

// This function body will be filled in by a compiled scene.
sdf_result_t compiled_scene_sdf(vec3 p) {
