
	return sdf_result_t(kTMax + 1, MAKE_NO_MAT());
}

sdf_result_t scene_sdf(vec3 p) {
	return compiled_scene_sdf(p);
}

const vec3 kOffsets[] = vec3[](
	vec3(kEpsilon, 0.0, 0.0),
	vec3(0.0, kEpsilon, 0.0),
	vec3(0.0, 0.0, kEpsilon));

vec3 estimate_sdf_normal(vec3 p) {
	return normalize(vec3(
		scene_sdf(p + kOffsets[0]).dist - scene_sdf(p - kOffsets[0]).dist,
		scene_sdf(p + kOffsets[1]).dist - scene_sdf(p - kOffsets[1]).dist,
		scene_sdf(p + kOffsets[2]).dist - scene_sdf(p - kOffsets[2]).dist));
}

hit_t eval_sdf(ray_t r, float t) {
	vec3 pos = r.origin + t * r.direction;
	sdf_result_t sdf = scene_sdf(pos);
	if (abs(sdf.dist) < kEpsilon) {
		vec3 normal = estimate_sdf_normal(pos);

		float front_face = dot(r.direction, normal);
		normal = (-sign(front_face)) * normal;

		return hit_t(true, pos, normal, t, front_face < 0, 
			sdf.closest_material,
			kEpsilon * normal, -(2.0 * kEpsilon) * normal);
	}

	return hit_t(false, vec3(0), vec3(0), sdf.dist, false, make_no_material(), vec3(0), vec3(0));
}
