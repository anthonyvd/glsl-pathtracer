// This file contains the code related to intersecting with surfaces defined
// exactly, by means of functions representing them. Only spheres are currently
// supported, mostly because they're easy and SDFs were kind of the focus 
// once the renderer got bootstrapped.
// Note that evaluating exact surfaces analytically this way is much more
// efficient in many cases than the equivalent SDF because the
// ray doesn't have to be marched to the surface. It's just harder to
// represent some types of complex geometry.

struct sphere_t {
	vec3 center;
	float radius;
	mat_t material;
};

const sphere_t kSpheres[] = sphere_t[](
	// Lambertian spheres
	//sphere_t(vec3(0, 0, 2), 0.5, MAKE_LAMB(vec3(0.7, 0.3, 0.3))),
	sphere_t(vec3(0, -110.5, 0), 100, MAKE_LAMB(0.8, 0.8, 0))
	// Metal spheres
	//sphere_t(vec3(-1,      0,   0), 0.5, MAKE_METAL(vec3(0.8, 0.8, 0.8), 0.3)),
	//sphere_t(vec3( 1,      0,   0), 0.5, MAKE_METAL(vec3(0.8, 0.6, 0.2), 1.0)),
	// Dielectric spheres
	//sphere_t(vec3(0, 0, 0), 0.5, MAKE_DIEL(1.5)),
	// Emitter spheres
	// sphere_t(vec3(0, 3, 0), 2, MAKE_EMIT(vec3(2)))
	//sphere_t(vec3(-3,         5,   -1), 2, MAKE_EMIT(vec3(1)))
);

hit_t hit_sphere(float t_min, float t_max, sphere_t s, ray_t r) {
	hit_t ret = hit_t(false, vec3(0), vec3(0), 0.0, false, make_no_material(), vec3(0), vec3(0));

	vec3 oc = r.origin - s.center;
	float a = dot(r.direction, r.direction);
	float b = 2.0 * dot(oc, r.direction);
	float c = dot(oc, oc) - s.radius * s.radius;
	float discriminant = b * b - 4.0 * a * c;

	if (discriminant < 0) {
		// No hit
		return ret;
	}
	
	float sqrtd = sqrt(discriminant);
	float denom = (2.0 * a);

	ret.t = (-b - sqrtd) / denom;
	if (ret.t >= t_min && ret.t <= t_max) {
		ret.pos = r.origin + ret.t * r.direction;
		ret.normal = normalize(ret.pos - s.center);

		float front_face = dot(r.direction, ret.normal);
		ret.normal = (-sign(front_face)) * ret.normal;
		ret.front_face = front_face < 0;

		ret.material = s.material;

		ret.hit = true;
		return ret;
	}

	ret.t = (-b + sqrtd) / denom;
	if (ret.t >= t_min && ret.t <= t_max) {
		ret.pos = r.origin + ret.t * r.direction;
		ret.normal = normalize(ret.pos - s.center);

		float front_face = dot(r.direction, ret.normal);
		ret.normal = (-sign(front_face)) * ret.normal;
		ret.front_face = front_face < 0;

		ret.material = s.material;

		ret.hit = true;
		return ret;
	}

	return ret;
}
