scatter_t scatter_lambertian(ray_t r, hit_t h) {
	vec3 scatter_direction = rand_in_hemisphere(h.normal);
	
	if (near_zero(scatter_direction)) {
		scatter_direction = h.normal;
	}
	
	ray_t scattered_ray = ray_t(h.pos + h.sdf_reflected_offset, normalize(scatter_direction));

	return scatter_t(true, h.material.l.albedo * max(0, dot(h.normal, scattered_ray.direction)), vec3(0), scattered_ray);
}

scatter_t scatter_metal(ray_t r, hit_t h) {
	vec3 reflected = reflect(normalize(r.direction), h.normal);
	ray_t scattered = ray_t(h.pos + h.sdf_reflected_offset, normalize(reflected + h.material.m.fuzz * rand_in_unit_sphere()));
	return scatter_t(dot(scattered.direction, h.normal) > 0, h.material.m.albedo, vec3(0), scattered);
}

scatter_t scatter_dielectric(ray_t r, hit_t h) {
	float refraction_ratio = h.front_face ? 1.0/h.material.d.ir : h.material.d.ir;

	vec3 unit_direction = normalize(r.direction);
	float cos_theta = min(dot(-unit_direction, h.normal), 1.0);
	float sin_theta = sqrt(1.0 - cos_theta * cos_theta);
	bool cannot_refract = (refraction_ratio * sin_theta) > 1.0;
	vec3 direction;

	if (cannot_refract || schlick_reflectance(cos_theta, refraction_ratio) > rfloat()) {
		return scatter_t(true, vec3(1.0), vec3(0), ray_t(h.pos + h.sdf_reflected_offset, normalize(reflect(unit_direction, h.normal))));
	}
	return scatter_t(true, vec3(1.0), vec3(0), ray_t(h.pos + h.sdf_transmitted_offset, normalize(refract(unit_direction, h.normal, refraction_ratio))));
}

scatter_t scatter_emitter(ray_t r, hit_t h) {
	return scatter_t(false, vec3(0), h.material.e.i * h.material.e.color, ray_t(vec3(0), vec3(0)));
}

scatter_t scatter(ray_t r, hit_t h) {
	switch (h.material.material_type) {
		case kLambertianMat:
			return scatter_lambertian(r, h);
		case kMetalMat:
			return scatter_metal(r, h);
		case kDielectricMat:
			return scatter_dielectric(r, h);
		case kEmitterMat:
			return scatter_emitter(r, h);
	}
	return scatter_t(false, vec3(0), vec3(0), ray_t(vec3(0), vec3(0)));
}
